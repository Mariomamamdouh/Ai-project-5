
from prettytable import PrettyTable
import random as rnd
Population_Size = 4
numb_of_elite_schedules = 1
tournament_selection_size = 3
mutation_rate = 0.1
class nurse:
        def _init_(self , number) :
            self._number=number    
        def get_number(self):return self._number
        
        
class patients :
    def _init_(self,Pnumber):
          self._Pnumber=Pnumber
    def get_Pnumber(self):return self._Pnumber
    
class days:
        def _init_(self,DayName):
             self._DayName=DayName
        def get_DayName(self):return self._DayName 
        


class shifts:
    def _init_(self,shifts):
        self._shifts = shifts
    def get_shifts(self):return self._shifts

class holidays:
    def _init_(self,holiday):
        self._holiday = holiday
    def get_holiday(self):return self._holiday
 
class classes:
    def _init_(self, nurse ):
        self._nurse = nurse
        self._day = None
        self._holiday = None
        self._shift = None
    def get_nurse(self):return self._nurse
    def get_day(self):return self._day
    def get_holiday(self):return self._holiday
    def get_shift(self):return self._shift
    def set_day(self,day): self._day = day
    def set_holiday(self,holiday): self._holiday = holiday
    def set_shift(self,shift): self._shift = shift
    def _str_(self):
        return str(self._nurse.get_number()) + "," + \
               str(self._day.get_DayName()) + "," + \
               str(self._holiday.get_holiday()) + "," + \
               str(self._shift.get_shifts())  
               
    
class schedule:
    def _init_(self):
        self._classes = []
        self._DATA = DATA
        self._fitness = -1
        self._NumOfConflicts = 0
        self._IsFitnessChanged = True 
        return None
    def get_classes(self):
        self._isFitnessChanged = True
        return self._classes
    def get_NumOfConflicts(self): return self._NumOfConflicts
    def get_fitness(self):
        if(self._IsFitnessChanged == True):
           self._fitness = self.calculate_fitness()
           self._isFitnessChanged = False
        return self._fitness    
            
    def initialize(self):
        da=self._DATA.get_DAYS()
        nu = self._DATA.get_Nurse()
        sh = self._DATA.get_SHifts()
        for i in range(0,len(nu)):
           # counter=0
           
            hol=DATA.get_HOLIDAYS()[rnd.randrange(0, len(DATA.get_HOLIDAYS()))]
            for j in range(0,7):
                NewClass = classes(nu[i])
                NewClass.set_holiday(hol)                      
                NewClass.set_day(DATA.get_DAYS()[j])
                NewClass.set_shift(DATA.get_SHifts()[rnd.randrange(0, len(DATA.get_SHifts()))])
                self._classes.append(NewClass)
                
             
        return self
    def calculate_fitness(self):
        self._NumOfConflicts=0
        classes = self.get_classes()
        
        for i in range(0,len(classes)):
            if( classes[i].get_day().get_DayName()== classes[i].get_holiday().get_holiday()):
                self._NumOfConflicts +=1
    
        for j in range(0,len(classes)-1):
            if((classes[j].get_shift().get_shifts()=="LateNight") and (classes[j+1].get_shift().get_shifts()=="Morning")):
                self._NumOfConflicts +=1
                
        for i in range(0,len(classes)):
          if((classes[j].get_shift().get_shifts()=="Morning") and (classes[j].get_shift().get_shifts()=="Night")):
                self._NumOfConflicts +=1
        aa= ((1.0*self._NumOfConflicts+ 1 ))   
        aa=1/aa
         
        return aa
    
class Population :
    def _init_(self,size):
        self._size = size
        self._DATA = DATA
        self._schedules = []
        for i in range(0, self._size): 
            self._schedules.append(schedule().initialize())
        return None
    def get_schedules(self): return self._schedules   
    
    
class GA:
    
    def _crossover_population(self,pop):
        crossover_pop = Population (0)
        for i in range(numb_of_elite_schedules):
            crossover_pop.get_schedules().append(pop.get_schedules()[i])
        i = numb_of_elite_schedules
        while i < Population_Size:
            schedule1 = self._select_tournament_population(pop).get_schedules()[0]
            schedule2 = self._select_tournament_population(pop).get_schedules()[0]
            crossover_pop.get_schedules().append(self._crossover_schedule(schedule1,schedule2)) 
            i+= 1
        return crossover_pop
    
    def evolve (self,population):
        return self._mutate_population(self._crossover_population(population))
    
    
    def _mutate_population(self,population):
        for i in range(numb_of_elite_schedules,Population_Size):
            self._mutate_schedule( population.get_schedules()[i])
        return population  
    
    def _crossover_schedule(self,schedule1,schedule2):
        crossoverschedule = schedule()
        for i in range(0, len(crossoverschedule.get_classes())):
            if (rnd.random() > 0.5): crossoverschedule.get_classes()[i] = schedule1.get_classes()[i]
            else: crossoverschedule.get_classes()[i] = schedule2.get_classes()[i]
        return crossoverschedule
    
    def _mutate_schedule(self,mutateschedule):
        SCHedule = schedule()
        for i in range(0,len(mutateschedule.get_classes())):
            if(mutation_rate > rnd.random()): mutateschedule.get_classes()[i] = SCHedule.get_classes()[i]
        return  mutateschedule
    
    def _select_tournament_population(self,pop):
        tournament_pop = Population(0)
        i = 0
        while i < tournament_selection_size:
            tournament_pop.get_schedules().append(pop.get_schedules()[rnd.randrange(0,Population_Size)])
            i += 1
        tournament_pop.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True) 
        return tournament_pop
    
class display :
    def print_available_data(self):
        print(">all available data")
        self.print_nurse()
        self.print_day()
        self.print_shift()
        self.print_holiday() 
        
        
    def print_nurse(self):
        nurses = DATA.get_Nurse()
        availableNurseTable=PrettyTable() 
        availableNurseTable.field_names =["nurses"]
        for i in range(0,len(nurses)):
            availableNurseTable.add_row([nurses[i].get_number()])
        print (availableNurseTable) 
        
    def print_day(self): 
        days = DATA.get_DAYS()
        availableDaysTable = PrettyTable()
        availableDaysTable.field_names =["days"]
        for i in range(0,len(days)):
            availableDaysTable.add_row([days[i].get_DayName()])
        print (availableDaysTable) 
        
    def print_shift(self): 
        shifts = DATA.get_SHifts()
        availableSHiftsTable = PrettyTable()
        availableSHiftsTable.field_names =["shifts"]
        for i in range(0,len(shifts)):
            availableSHiftsTable.add_row([shifts[i].get_shifts()])
        print (availableSHiftsTable) 
        
    def print_holiday(self): 
        holidays = DATA.get_HOLIDAYS()
        availableHolidaysTable = PrettyTable()
        availableHolidaysTable.field_names =["holidays"]
        for i in range(0,len(holidays)):
            availableHolidaysTable.add_row([holidays[i].get_holiday()])
        print (availableHolidaysTable) 
        
    def print_generation(self,Population):
        table1=PrettyTable()
        table1.field_names=["schedule#" ,"fitness","#of conflicts",["num","nurses","holiday","days","shifts"]]
        schedules = population.get_schedules()
        for i in range(0,len(schedules)):
            table1.add_row([str(i), round(schedules[i].get_fitness(),3),schedules[i].get_NumOfConflicts(),[schedules[i].initialize()
                                                                                                          ]])
        print(table1)
        
        
    def print_schedule_as_table(self,schedule):
        classes=schedule.get_classes()
        table=PrettyTable()
        table.field_names=["rows#","nurse#" ,"holiday","day","shifts"]
        for i in range(0,98):
            table.add_row([str(i),classes[i].get_nurse().get_number() ,
            
    
                              classes[i].get_holiday().get_holiday() ,
                              classes[i].get_day().get_DayName() ,
                              classes[i].get_shift().get_shifts()])
        print(table)
 
class data:
    nurse_number  = ["nurse1",
                     "nurse2",
                     "nurse3",
                     "nurse4",
                     "nurse5",
                     "nurse6",
                     "nurse7",
                     "nurse8",
                     "nurse9",
                     "nurse10",
                     "nurse11",
                     "nurse12",
                     "nurse13",
                     "nurse14" ]
    
    patients_number  = ["patient1",
                        "patient2",
                        "patient3",
                        "patient4"]
    
    Days  = [ "sunday" , "monday" , "tuseday" , "wednesday" , "thursday" , "friday" , "saturday"]
    
    
    HoliDays = ["sunday","monday","tuseday","wednesday","thursday","friday","saturday"]
    
    SHIFTS = ["Morning","Night","LateNight"]
    
              
    
    def _init_(self):
     self._Nurse= []; self._PATIENTS = []; self._DAYS = [];  self._SHifts= [];  self._HOLIDAYS=[]     
    
     for i in range(0,len(self.nurse_number)):
       self._Nurse.append(nurse(self.nurse_number[i]))
    
     for i in range(0,len(self.patients_number)):
       self._PATIENTS.append(patients(self.patients_number[i]))
    
     for i in range(0,len(self.Days)):
       self._DAYS.append(days(self.Days[i]))
    
     for i in range(0,len(self.SHIFTS)):
      self._SHifts.append(shifts(self.SHIFTS[i]))
    
     for i in range(0,len(self.HoliDays)):
      self._HOLIDAYS.append(holidays(self.HoliDays[i]))
    
     #day1 = days(self._DAYS[0],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day2 = days(self._DAYS[1],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day3 = days(self._DAYS[2],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day4 = days(self._DAYS[3],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day5 = days(self._DAYS[4],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day6 = days(self._DAYS[5],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])
     #day7 = days(self._DAYS[6],[self._SHIFTS[0],self._SHIFTS[1],self._SHIFTS[2]])   
     #self._dAys = [day1,day2,day3,day4,day5,day6,day7]
    def get_DAYS(self): return self._DAYS
    def get_Nurse(self): return self._Nurse
    def get_PATIENTS(self): return self._PATIENTS
   # def get_dAys(self): return self._dAys
    def get_HOLIDAYS(self): return self._HOLIDAYS
    def get_SHifts(self): return self._SHifts
    
DATA = data() 
display = display()
display.print_available_data()
generationNumber = 0
print("\n> generation #"+str(generationNumber))
population = Population(Population_Size)
population.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True)
display.print_generation(population)
display.print_schedule_as_table(population.get_schedules()[0])
geneticAlgorithm = GA()
while ((population.get_schedules()[0].get_fitness() != 1.0)&(generationNumber <5)):
    generationNumber +=1
    print("\n> Generation #" + str(generationNumber))
    population = geneticAlgorithm.evolve(population)
    population.get_schedules().sort(key=lambda x: x.get_fitness(), reverse=True)
    display.print_generation(population)
    display.print_schedule_as_table(population.get_schedules()[0])
    
print("\n\n")